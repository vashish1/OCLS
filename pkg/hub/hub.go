package hub

import (
	"encoding/json"
	"os"
	"sync"
	"time"

	"github.com/at-wat/ebml-go/webm"
	"github.com/dropbox/dropbox-sdk-go-unofficial/dropbox/files"
	"github.com/dropbox/dropbox-sdk-go-unofficial/dropbox/sharing"
	"github.com/fasthttp/websocket"
	"github.com/pion/webrtc/v2"
	"github.com/pion/webrtc/v2/pkg/media/samplebuilder"
	log "github.com/sirupsen/logrus"
	"github.com/vashish1/OnlineClassPortal/pkg/models"
)

type messageBytes []byte

type WsMessage struct {
	Data []byte
	User string
}

// Connection is an middleman between the websocket connection and the hub.
type Connection struct {
	Ws *websocket.Conn

	Send chan []byte
}

type Subscription struct {
	Conn *Connection
	User string
}

// Hub maintains the set of active connections and broadcasts messages to the
// connections.
type Hub struct {
	// Registered connections.
	Users WsUsers

	// Inbound messages from the connections.
	Broadcast chan WsMessage

	// Register requests from the connections.
	Register chan Subscription

	// Unregister requests from connections.
	UnRegister chan Subscription
}

type WsUsers struct {
	Users map[string]map[*Connection]bool
	Mutex *sync.RWMutex
}

// classSessionPeerConnections allows class session video calls where a publisher
// broadcasts audio and video to other subscribers. Other subscribers broadcasts
// audio to each other.
// Video is mapped to unique ID which is to be generated by server for current class session
// to video and audio track.
// If UUID to current VIDEO track is nil. It indicates the room session is over.
// If publisher logs off, all peer connections related to that room is closed.
// Mutexes is integrated with video, audio and peerconnections to ensure data race free.
type ClassSessionPeerConnections struct {
	api *webrtc.API

	publisherVideoTracks  map[string]*webrtc.Track // mapped sessionID to track
	publisherTrackMutexes *sync.RWMutex

	audioTrack        map[string]*webrtc.Track // mapped userID to track
	audioTrackSender  map[*webrtc.Track][]RtpSenderData
	audioTrackMutexes *sync.RWMutex

	peerConnection        map[string]*webrtc.PeerConnection // peerConnection is mapped user to peerconnection.
	peerConnectionMutexes *sync.RWMutex

	connectedUsers      map[string][]string // publisher is mapped sessionID to all connected users.
	connectedUsersMutex *sync.RWMutex
}

// rtpSenderData saves user RTPSender.
// On remove track, users can easily map all audio track to its senders.
// userID maps sender to it's peerconnection.
type RtpSenderData struct {
	UserID string
	Sender *webrtc.RTPSender
}

type WebmWriter struct {
	FileName                       string
	AudioWriter, videoWriter       webm.BlockWriteCloser
	AudioBuilder, videoBuilder     *samplebuilder.SampleBuilder
	AudioTimestamp, videoTimestamp uint32
}

type SdpConstruct struct {
	MsgType        string `json:"msgType"`
	ClassSessionID string `json:"sessionID"`
	AuthorName     string `json:"name"`
	PublisherID    string `json:"publisherID"`
	UserID         string `json:"userID"`
	RoomID         string `json:"roomID"`
	SDP            string `json:"sdp"`

	PeerConnection *webrtc.PeerConnection
}

type DropboxUploader struct {
	UploadClient       files.Client
	SharableLinkClient sharing.Client
	FileUploadInfo     *files.CommitInfo

	File         *os.File
	FileFullPath string
	FileSize     int64
}

func (h *Hub) RegisterWS(ws *websocket.Conn, email string) {
	c := &Connection{Send: make(chan []byte, 256), Ws: ws}

	s := Subscription{Conn: c, User: email}
	HubConstruct.Register <- s
	log.Infoln("user", email, "Connected")
	go s.readPump(email)
	go s.writePump()

}

var Upgrader = websocket.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
}

func (h *Hub) Run() {

	// Upgrader.CheckOrigin = func(r *http.Request) bool {
	// 	host := r.Header.Get("Origin")
	// 	//
	// 	for _, allowdOrigin := range values.Config.CorsAllowedOrigins {
	// 		if host == allowdOrigin {
	// 			return true
	// 		}
	// 	}
	// 	log.Debugln("Host is not allowed:", host)

	// 	return false
	// }

	for {
		select {
		case s := <-h.Register:
			h.Users.Mutex.Lock()

			if _, exists := h.Users.Users[s.User]; !exists {
				connections := make(map[*Connection]bool)

				h.Users.Users[s.User] = connections
			}

			h.Users.Users[s.User][s.Conn] = true

			log.Infoln(s.User, "registered")
			go broadcastOnlineStatusToAllUserRoom(s.User, true)
			h.Users.Mutex.Unlock()

		case s := <-h.UnRegister:
			h.Users.Mutex.Lock()
			connections, exists := h.Users.Users[s.User]
			if exists {
				if _, ok := connections[s.Conn]; ok {
					delete(connections, s.Conn)
					close(s.Conn.Send)
					if len(connections) == 0 {
						delete(h.Users.Users, s.User)
						go broadcastOnlineStatusToAllUserRoom(s.User, false)
						log.Infoln(s.User, "offline")
					}
					log.Infoln(s.User, "subscription removed")
				}
			}
			h.Users.Mutex.Unlock()

		case m := <-h.Broadcast:
			h.Users.Mutex.RLock()
			connections := h.Users.Users[m.User]
			for c := range connections {
				select {
				case c.Send <- m.Data:
				default:
					close(c.Send)
					delete(connections, c)
					if len(connections) == 0 {
						h.Users.Mutex.Lock()
						delete(h.Users.Users, m.User)
						h.Users.Mutex.Unlock()
						go broadcastOnlineStatusToAllUserRoom(m.User, false)
					}
				}
			}
			h.Users.Mutex.RUnlock()
		}
	}
}

func (h *Hub) sendMessage(msg []byte, user string) {
	m := WsMessage{msg, user}
	HubConstruct.Broadcast <- m
}

// WritePump pumps messages from the hub to the websocket connection.
func (s *Subscription) writePump() {
	c := s.Conn
	ticker := time.NewTicker(pingPeriod)
	defer func() {
		ticker.Stop()
		c.Ws.Close()
	}()

	for {
		select {
		case message, ok := <-c.Send:
			if !ok {
				c.Write(websocket.CloseMessage, []byte{})
				return
			}

			if err := c.Write(websocket.TextMessage, message); err != nil {
				return
			}

		case <-ticker.C:
			if err := c.Write(websocket.PingMessage, []byte{}); err != nil {
				return
			}
		}
	}
}

// write writes a message with the given message type and payload.
func (c *Connection) Write(mt int, payload []byte) error {
	if err := c.Ws.SetWriteDeadline(time.Now().Add(writeWait)); err != nil {
		return err
	}

	return c.Ws.WriteMessage(mt, payload)
}

// ReadPump pumps messages from the websocket connection to the hub.
func (s Subscription) readPump(user string) {
	c := s.Conn

	defer func() {
		HubConstruct.UnRegister <- s
		c.Ws.Close()
	}()

	c.Ws.SetReadDeadline(time.Now().Add(pongWait))

	c.Ws.SetPongHandler(
		func(string) error {
			return c.Ws.SetReadDeadline(time.Now().Add(pongWait))
		})

	for {
		var err error
		var msg messageBytes
		_, msg, err = c.Ws.ReadMessage()

		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway) {
				log.Errorln("error: ", err)
			}

			return
		}

		data := struct {
			MsgType    string `json:"msgType"`
			User       string `json:"userID"`
			SearchText string `json:"searchText"`
		}{}

		err = json.Unmarshal(msg, &data)
		if err != nil {
			log.Println("could not unmarshal json")
		}

		if data.User != user {
			log.Warningf("an invalidated user tried to make websocket request for %s, invalidated user: %s, user: %s", data.MsgType, data.User, user)
			continue
		}

		switch data.MsgType {
		// // TODO: add support to remove message.
		case models.WebsocketOpenMsgType:
			// handleLoadUserContent(user)

			// case values.RequestMessages:
			// 	msg.handleRequestMessages(user)

			// case values.NewMessageMsgType:
			// 	msg.handleNewMessage()

			// case values.CreateRoomMsgType:
			// 	msg.handleCreateNewRoom()

			// case values.JoinRoomMsgType:
			// 	msg.handleUserAcceptRoomRequest()

			// case values.ExitRoomMsgType:
			// 	msg.handleExitRoom(user)

			// case values.RequestUsersToJoinRoomMsgType:
			// 	msg.handleRequestUserToJoinRoom()

			// case values.NewFileUploadMsgType:
			// 	msg.handleNewFileUpload()

			// case values.UploadFileChunkMsgType:
			// 	msg.handleUploadFileChunk()

			// case values.UploadFileSuccessMsgType:
			// 	msg.handleUploadFileUploadComplete()

			// case values.RequestDownloadMsgType:
			// 	msg.handleRequestDownload(user)

			// case values.DownloadFileChunkMsgType:
			// 	msg.handleFileDownload(user)

			// case values.StartClassSession:
			// 	classSessions.startClassSession(msg, user)

			// case values.JoinClassSession:
			// 	classSessions.joinClassSession(msg, user)

			// case values.EndClassSession:
			// 	classSessions.endClassSession(user)

			// case values.RenegotiateSDP:
			// 	sdpConstruct{}.acceptRenegotiation(msg)

			// case values.SearchUserMsgType:
			// 	handleSearchUser(data.SearchText, user)

			// default:
			// 	log.Println("Could not convert required type", data.MsgType)
		}
	}
}
